1.How many seconds are in an hour? Use the interactive interpreter as a calculator and multiply the
number of seconds in a minute (60) by the number of minutes in an hour (also 60).

Ans: 3600

2.Assign the result from the previous task (seconds in an hour) to a variable called
seconds_per_hour.

Ans: seconds_per_hour=3600

3.How many seconds do you think there are in a day? Make use of the variables seconds per hour
and minutes per hour.

Ans: seconds_per_hour*minutes_per_hour*24=60*60*24=86400 seconds

4.Calculate seconds per day again, but this time save the result in a variable called seconds_per_day.

Ans:seconds_per_day=86400

5.Divide seconds_per_day by seconds_per_hour. Use floating-point (/) division.

Ans: seconds_per_day/seconds_per_hour=86400/3600=24 hours

6.Divide seconds_per_day by seconds_per_hour, using integer (//) division. Did this number agree
with the floating-point value from the previous question, aside from the final .0?

Ans: Yes, both the values are the same.

7.Write a generator, genPrimes, that returns the sequence of prime numbers on successive calls to
its next() method: 2, 3, 5, 7, 11, ...

Ans: def genPrimes():
    primes = []  # List to store prime numbers
    yield 2  # 2 is the first prime number
    candidate = 3  # Start checking for primes from 3

    while True:
        is_prime = all(candidate % prime != 0 for prime in primes)
        if is_prime:
            primes.append(candidate)
            yield candidate
        candidate += 2  # Check only odd numbers for primality

# Example usage:
prime_generator = genPrimes()

for _ in range(5):
    print(next(prime_generator))

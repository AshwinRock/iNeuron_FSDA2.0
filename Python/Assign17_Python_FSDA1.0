1.Assign the value 7 to the variable guess_me. Then, write the conditional tests (if, else, and elif) to
print the string &#39;too low&#39; if guess_me is less than 7, &#39;too high&#39; if greater than 7, and &#39;just right&#39; if equal
to 7.

Ans: 
guess_me = 7
if guess_me < 7:
    print('too low')
elif guess_me > 7:
    print('too high')
else:
    print('just right')

2.Assign the value 7 to the variable guess_me and the value 1 to the variable start. Write a while
loop that compares start with guess_me. Print too low if start is less than guess me. If start equals
guess_me, print &#39;found it!&#39; and exit the loop. If start is greater than guess_me, print &#39;oops&#39; and exit
the loop. Increment start at the end of the loop.

Ans:
guess_me = 7
start = 1

while start <= guess_me:
    if start < guess_me:
        print('too low')
    elif start == guess_me:
        print('found it!')
        break  # exit the loop when guess_me is found
    else:
        print('oops')
        break  
    start += 1 

3.Print the following values of the list [3, 2, 1, 0] using a for loop.

Ans: 
my_list = [3, 2, 1, 0]
for value in my_list:
    print(value)

4.Use a list comprehension to make a list of the even numbers in range(10)

Ans: 
even_numbers = [x for x in range(10) if x % 2 == 0]
print(even_numbers)

5.Use a dictionary comprehension to create the dictionary squares. Use range(10) to return the
keys, and use the square of each key as its value.

Ans:
squares = {x: x**2 for x in range(10)}
print(squares)

6.Construct the set odd from the odd numbers in the range using a set comprehension (10).

Ans:
odd = {x for x in range(10) if x % 2 != 0}
print(odd)

7.Use a generator comprehension to return the string &#39;Got &#39; and a number for the numbers in
range(10). Iterate through this by using a for loop.

Ans:
generator_sequence = ('Got ' + str(x) for x in range(10))
for item in generator_sequence:
    print(item)

8.Define a function called good that returns the list ['Harry', 'Ron', 'Hermione'].

Ans: def good():
    return ['Harry', 'Ron', 'Hermione']
result = good()
print(result)

9.Define a generator function called get_odds that returns the odd numbers from range(10). Use a
for loop to find and print the third value returned.

Ans: def get_odds():
    for number in range(10):
        if number % 2 != 0:
            yield number

for index, value in enumerate(get_odds()):
    if index == 2:
        print("Third value returned:", value)
        break

10.Define an exception called OopsException. Raise this exception to see what happens. Then write
the code to catch this exception and print 'Caught an oops'.

Ans: 
class OopsException(Exception):
    pass
try:
    raise OopsException("Something went wrong!")
except OopsException as e:
    print('Caught an oops:', e)


11.Use zip() to make a dictionary called movies that pairs these lists: titles = ['Creature of Habit',
'Crewel Fate'] and plots = ['A nun turns into a monster', 'A haunted yarn shop'].

Ans:
titles = ['Creature of Habit', 'Crewel Fate']
plots = ['A nun turns into a monster', 'A haunted yarn shop']
movies = dict(zip(titles, plots))
print(movies)















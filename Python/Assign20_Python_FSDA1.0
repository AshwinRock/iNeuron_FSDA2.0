1.Set the variable test1 to the string 'This is a test of the emergency text system' and save test1 to a
file named test.txt.

Ans: 
test1 = 'This is a test of the emergency text system,'
with open('test.txt', 'w') as file:
    file.write(test1)

2.Read the contents of the file test.txt into the variable test2. Is there a difference between test 1
and test 2?

Ans: 
with open('test.txt', 'r') as file:
    test2 = file.read()
if test1 == test2:
    print("test1 and test2 are the same.")
else:
    print("test1 and test2 are different.")

3.Create a CSV file called books.csv by using these lines:
title,author,year
The Weirdstone of Brisingamen,Alan Garner,1960
Perdido Street Station,China Miéville,2000
Thud!,Terry Pratchett,2005
The Spellman Files,Lisa Lutz,2007
Small Gods,Terry Pratchett,1992

Ans: import csv
data = [
    ['title', 'author', 'year'],
    ['The Weirdstone of Brisingamen', 'Alan Garner', '1960'],
    ['Perdido Street Station', 'China Miéville', '2000'],
    ['Thud!', 'Terry Pratchett', '2005'],
    ['The Spellman Files', 'Lisa Lutz', '2007'],
    ['Small Gods', 'Terry Pratchett', '1992']
]

with open('books.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)

print("books.csv has been created.")

4.Use the sqlite3 module to create a SQLite database called books.db, and a table called books with
these fields: title (text), author (text), and year (integer).

Ans: import sqlite3
conn = sqlite3.connect('books.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        title TEXT,
        author TEXT,
        year INTEGER
    )
''')
conn.commit()
conn.close()

print("books.db has been created with the 'books' table.")

5.Read books.csv and insert its data into the book table.

Ans: import sqlite3
import csv
conn = sqlite3.connect('books.db')
cursor = conn.cursor()
with open('books.csv', 'r') as file:
    reader = csv.reader(file)
    next(reader)  # Skip the header row
    for row in reader:
        cursor.execute('INSERT INTO books (title, author, year) VALUES (?, ?, ?)', (row[0], row[1], int(row[2])))

conn.commit()
conn.close()

print("Data from books.csv has been inserted into the 'books' table.")

6.Select and print the title column from the book table in alphabetical order.

Ans: import sqlite3
conn = sqlite3.connect('books.db')
cursor = conn.cursor()
cursor.execute('SELECT title FROM books ORDER BY title')
titles = cursor.fetchall()
for title in titles:
    print(title[0])
conn.close()

7.From the book table, select and print all columns in the order of publication.

Ans: import sqlite3
conn = sqlite3.connect('books.db')
cursor = conn.cursor()
cursor.execute('SELECT * FROM books ORDER BY year')
books_data = cursor.fetchall()
for row in books_data:
    print(row)
conn.close()

8.Use the sqlalchemy module to connect to the sqlite3 database books.db that you just made in
exercise 6.

Ans: pip install sqlalchemy
from sqlalchemy import create_engine
engine = create_engine('sqlite:///books.db')
connection = engine.connect()

print("Connected to books.db using SQLAlchemy.")

9.Install the Redis server and the Python redis library (pip install redis) on your computer. Create a
Redis hash called test with the fields count (1) and name ('Fester Bestertester'). Print all the fields for
test.

Ans: 
pip install redis
import redis
r = redis.StrictRedis(host='localhost', port=6379, decode_responses=True)
r.hset('test', 'count', 1)
r.hset('test', 'name', 'Fester Bestertester')
all_fields = r.hgetall('test')
print("All fields for 'test':", all_fields)

10.Increment the count field of test and print it.

Ans: import redis
r = redis.StrictRedis(host='localhost', port=6379, decode_responses=True)
r.hincrby('test', 'count', 1)
updated_count = r.hget('test', 'count')
print("Updated count for 'test':", updated_count)




